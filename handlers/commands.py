import logging
import sys
from os import getenv

import httpx
from dotenv import load_dotenv

from aiogram import Router, html
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from filters.admin import IsAdminFilter

load_dotenv()
GROQ_API_KEY = getenv("GROQ_API_KEY")


# Create a router for command handlers
router = Router()

load_dotenv()
ADMIN_IDS = list(map(int, getenv("ADMIN_IDS").split(',')))

logging.basicConfig(level=logging.INFO, stream=sys.stdout)
logger = logging.getLogger(__name__)


@router.message(CommandStart(), IsAdminFilter(ADMIN_IDS))
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {html.bold(message.from_user.first_name)}!"
                         f"\n\n–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ó–¥–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.first_name)}!"
                         f"\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
                         f"\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@router.message(Command('rate_limit'), IsAdminFilter(ADMIN_IDS))
async def check_openai_rate_limit(message: Message):
    """Checks the remaining rate limit for Groq API."""
    try:
        # Send a test request to Groq API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers={"Authorization": f"Bearer {GROQ_API_KEY}"},
                json={
                    "model": "llama-3.3-70b-versatile",
                    "messages": [{"role": "system", "content": "Test request"}],
                },
            )

        # Extract rate limit information from headers
        remaining_requests = response.headers.get("x-ratelimit-remaining-requests", "Unknown")
        limit_reset_time = response.headers.get("x-ratelimit-reset-requests", "Unknown")

        # Format response message
        reply_message = (
            f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: `{remaining_requests}`\n"
            f"- –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: `{limit_reset_time}`\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!!"
        )
    except Exception as e:
        # Handle any errors
        logger.error(f'Request error: {e}')
        reply_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    # Send the message to the user
    await message.answer(reply_message, parse_mode="Markdown")
